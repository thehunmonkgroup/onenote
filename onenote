#!/usr/bin/env bash

TASK_VERSION_NO_NEWLINE="2.5.2"

task_number=${1}
consume_input=${2}

progname=$(basename ${0})
newline="\n"
linefeed=$'\n'
consume_arg="-"
output=""
default_pipe_editor="vipe"
pipe_editor=${ONENOTE_PIPE_EDITOR:-${default_pipe_editor}}

vercomp () {
  if [[ $1 == $2 ]]
  then
    return 0
  fi
  local IFS=.
  local i ver1=($1) ver2=($2)
  # fill empty fields in ver1 with zeros
  for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
  do
    ver1[i]=0
  done
  for ((i=0; i<${#ver1[@]}; i++))
  do
    if [[ -z ${ver2[i]} ]]
    then
      # fill empty fields in ver2 with zeros
      ver2[i]=0
    fi
    if ((10#${ver1[i]} > 10#${ver2[i]}))
    then
      return 1
    fi
    if ((10#${ver1[i]} < 10#${ver2[i]}))
    then
      return 2
    fi
  done
  return 0
}

vercomp $(task --version) ${TASK_VERSION_NO_NEWLINE}
vercomp_result=$?
test ${vercomp_result} = 2
legacy_version=$?

if [ $legacy_version -eq 0 ]; then
  newline="###NEWLINE###"
fi

usage() {
  echo "Usage: ${progname} <task_id>

Edit multiline taskwarrior notes in vi/vim.

Setup a 'notes' UDA for taskwarrior:
  task config uda.notes.type string
  task config uda.notes.label Notes

Notes can also be piped to standard in:

  echo \"foo\" | ${progname} <task_id> -

CAVEATS:

OneNote depends on the vipe pipe editor being installed and in your path.
"
if [ $legacy_version -eq 0 ]; then
  echo "
Due to a current bug in taskwarrior less than ${TASK_VERSION_NO_NEWLINE} newlines are represented
internally by the marker ${newline}:
  https://github.com/GothenburgBitFactory/taskwarrior/issues/2107
"
fi
}

# Override the system task binary and pipe editor in testing env.
if [ -n "${ONENOTE_TEST_HARNESS}" ]; then
  task() {
    if [ "${1}" = "_get" ]; then
      echo "${ONENOTE_TEST_NOTES}"
    elif [ "${1}" = "_config" ]; then
      if [ -n "${ONENOTE_MISSING_NOTES}" ]; then
        echo ""
      else
        echo "uda.notes.label\nuda.notes.type"
      fi
    else
      local notes="${3}"
      echo "${notes:6}"
    fi
  }
fi

if [ "$(which ${pipe_editor})" = "" ]; then
  echo
  echo "ERROR: The '${pipe_editor}' binary must be installed and in your path!"
  echo
  usage
  exit 1
fi

if [ $# -lt 1 ] || [ $# -gt 2 ]; then
  usage
  exit 1
else
  if [ $# -eq 2 ]; then
    if [ "${2}" != "${consume_arg}" ]; then
      usage
      exit 1
    else
      while IFS='$\n' read -r line; do
        if [ -z "${output}" ]; then
          output="${line}"
        else
          output="${output}${newline}${line}"
        fi
      done
      task ${task_number} modify notes:"${output}"
    fi
  else
    if [ "$(task _config | grep 'uda.notes.type')" = "" ] || [ "$(task _config | grep 'uda.notes.label')" = "" ]; then
      usage
      exit 1
    fi
    notes=$(task _get ${task_number}.notes)
    if [ -n "${ONENOTE_DEFAULT_CONTENT}" -a -z "${notes}" ]; then
      notes="${ONENOTE_DEFAULT_CONTENT}"
    fi
    if [ $? -eq 0 ]; then
      # The literal line feed is necessary for POSIX compatibility with sed.
      echo "${notes}" | sed "s/${newline}/\\$linefeed/g" | ONENOTE_TASK=${task_number} ${pipe_editor} | ${0} ${task_number} ${consume_arg}
    fi
  fi
fi
